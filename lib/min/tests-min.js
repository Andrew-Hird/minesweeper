function boardValid(){return"object"!=typeof board?(displayMessage("Remember to define your <code>board</code> object!"),!1):board.hasOwnProperty("cells")?isArray(board.cells)?0===board.cells.length?(displayMessage("This board doesn't seem to have any cells in it... try adding some elements to your array."),!1):board.cells.length>36?(displayMessage("The game can only cope with total number of cells up to 36! Try again with fewer cells."),!1):isSquare(board.cells.length)?!0:(displayMessage("The number of cells in your object must be able to form a square: same number on each side!"),!1):(displayMessage("<code>board.cells</code> should be an array."),!1):(displayMessage("Your <code>board</code> object needs a property named <code>cells</code>."),!1)}function cellsValid(){var e=board.cells.filter(isInvalidCell);return 0===e.length}function isInvalidCell(e){return"object"!=typeof e?(displayMessage("At least one of those cells is not an object! <code>{ }</code>"),!0):e.hasOwnProperty("row")?e.hasOwnProperty("col")?coordinatesValid(e)?e.hasOwnProperty("isMine")?e.hasOwnProperty("hidden")?!1:(displayMessage("I found a cell that doesn't know if it's hidden or not (each cell needs a <code>hidden</code> property)!"),!0):(displayMessage("I found a cell that doesn't know if it's a mine or not (each cell needs an <code>isMine</code> property)!"),!0):!0:(displayMessage("I found a cell without a <code>col</code> property!"),!0):(displayMessage("I found a cell without a <code>row</code> property!"),!0)}function coordinatesValid(e){if("number"!=typeof e.row||"number"!=typeof e.col)return displayMessage("Both <code>row</code> and <code>col</code> must be numbers (not strings or anything else)."),!1;var o=board.cells.filter(function(o){return e.row===o.row&&e.col===o.col});if(o.length>1)return displayMessage("There seems to be more than one cell with <code>row: "+e.row+"</code> and <code>col: "+e.col+"</code>."),!1;var a=Math.sqrt(board.cells.length);return e.row>a||e.col>a?(displayMessage("I found a cell with <code>row</code> or <code>col</code> outside the board boundaries."),!1):!0}function isSquare(e){return 1===e?!1:Math.sqrt(e)%1===0}function isArray(e){return"[object Array]"===Object.prototype.toString.call(e)}var tests={boardValid:boardValid,cellsValid:cellsValid};